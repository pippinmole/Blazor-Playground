@page "/signup"
@using System.ComponentModel.DataAnnotations
@using System.Web
@using BlazorServerTest.Data.Users
@using Microsoft.AspNetCore.DataProtection
@using Microsoft.AspNetCore.Identity
@using Microsoft.IdentityModel.Tokens
@inherits LayoutComponentBase
@layout IntakeLayout
@inject ILogger<CreateAccount> _logger
@inject NavigationManager _navigationManager
@inject IAppUserManager _userManager;
@inject IDataProtectionProvider _dataProtection;

@code {
    private AccountCreationForm AccountForm { get; set; } = new();

    public class AccountCreationForm {
        public EAccountType AccountType { get; set; } = EAccountType.None;

        [Required(ErrorMessage = "Please provide a valid first name")]
        [StringLength(64, MinimumLength = 1)]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Please provide a valid last name")]
        [StringLength(64, MinimumLength = 1)]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Please provide a valid email"), EmailAddress]
        [StringLength(256, MinimumLength = 3)]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please provide a valid password"), DataType(DataType.Password)]
        [StringLength(128, MinimumLength = 8, ErrorMessage = "Please provide a password between 8 and 128 characters")]
        public string Password { get; set; }

        [StringLength(64, MinimumLength = 3)]
        public string Organization { get; set; }

        public ECreationStage CreationStage { get; set; } = ECreationStage.OrganisationType;

        public void Next() {
            if ( CreationStage == ECreationStage.OrganisationType && AccountType == EAccountType.None )
                return;

            CreationStage++;
        }
    }

    public enum EAccountType {
        None,
        Individual,
        Company
    }

    public enum ECreationStage {
        OrganisationType,
        UserCredentials
    }

    private static string? ConditionalTag(string tag, bool condition) {
        return condition ? tag : null;
    }

    private async Task OnAccountCreationSubmit(EditContext ctx) {
        _logger.LogInformation($"Received create account request from {AccountForm.FirstName} {AccountForm.LastName}.");

        var user = new ApplicationUser {
            FirstName = AccountForm.FirstName,
            LastName = AccountForm.LastName,
            Email = AccountForm.Email,
            UserName = $"{AccountForm.FirstName}_{AccountForm.LastName}"
        };

        var result = await _userManager.CreateAsync(user, AccountForm.Password);

        if ( result.Succeeded ) {
            var token = await _userManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "Login");
            var data = $"{user.Id}|{token}";
            var protector = _dataProtection.CreateProtector("Login");

            var protectedData = Base64UrlEncoder.Encode(protector.Protect(data));
            var redirect = HttpUtility.UrlEncode("/signup/verify");
            _navigationManager.NavigateTo($"/auth/login?token={protectedData}&redirect={redirect}", true);
        } else {
            foreach ( var error in result.Errors ) {
                _logger.LogWarning($"Failed to create user: {error.Description}");
            }
        }
    }
}

<EditForm Model="AccountForm" OnValidSubmit="@OnAccountCreationSubmit">
    <h2 style="color: var(--text-color-prim)">
        Create your account!
    </h2>
        
    <p>
        Start your job seeker adventure today - get access to thousands of employers in your field.
    </p>
        
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="@ConditionalTag("d-none", AccountForm.CreationStage != ECreationStage.OrganisationType)">
        <div class="w-100">
            <p>Firstly, are you:</p>
            
            <div class="d-flex flex-row flex-wrap align-items-stretch justify-content-between">
                <button type="button" class="signup-tabloid @ConditionalTag("st-selected", AccountForm.AccountType == EAccountType.Individual)"
                        @onclick="() => AccountForm.AccountType = EAccountType.Individual">
                    <div class="icon-container">
                        <i class="fas fa-users"></i>
                    </div>
            
                    <h3 class="mt-3">Individual</h3>
                    <p>Looking for a job? Click me!</p>
                </button>
                <button type="button" class="signup-tabloid @ConditionalTag("st-selected", AccountForm.AccountType == EAccountType.Company)"
                        @onclick="() => AccountForm.AccountType = EAccountType.Company">
                    <div class="icon-container">
                        <i class="fas fa-users"></i>
                    </div>
            
                    <h3 class="mt-3">Company</h3>
                    <p>Looking for people to hire on your adventure? Click me!</p>
                </button>
            </div>
            
            <button type="button" class="btn btn-primary w-100 p-3 mt-3"
                    @onclick="AccountForm.Next"
                    disabled="@(AccountForm.AccountType == EAccountType.None)">
                @if ( AccountForm.AccountType == EAccountType.None ) {
                    @:Please select an account type...
                } else {
                    @:Confirm
                }
            </button>
        </div>
    </div>
        
    <div class="@ConditionalTag("d-none", AccountForm.CreationStage != ECreationStage.UserCredentials)">
        <div class="w-100">
            <div class="row mb-3">
                <div class="col">
                    <label for="exampleInputFirstname1">First name</label>
                    <InputText @bind-Value="@AccountForm.FirstName" id="exampleInputFirstname1" class="form-control" placeholder="John"></InputText>
                </div>
                <div class="col">
                    <label for="exampleInputLastname1">Last name</label>
                    <InputText @bind-Value="@AccountForm.LastName" id="exampleInputLastname1" class="form-control" placeholder="Appleseed"></InputText>
                </div>
            </div>
                    
            <div class="form-group mb-3">
                <label for="exampleInputEmail1">Email address</label>
                <InputText type="email" @bind-Value="@AccountForm.Email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="myname@email.com"></InputText>
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>
                
            @if ( AccountForm.AccountType == EAccountType.Company ) {
                <div class="form-group mb-3">
                    <label for="exampleInputOrgname1">Organisation Name</label>
                    <InputText @bind-Value="@AccountForm.Organization" class="form-control" id="exampleInputOrgname1" placeholder="Bobs Burgers Co."></InputText>
                    <!--<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>-->
                </div>
            }
                
            <div class="form-group mb-3">
                <label for="exampleInputPassword1">Password</label>
                <InputText @bind-Value="@AccountForm.Password" type="password" class="form-control" id="exampleInputPassword1" placeholder=""></InputText>
            </div>
                    
            <button type="submit" class="btn btn-primary w-100 p-3 mt-3">
                @if ( AccountForm.AccountType == EAccountType.None ) {
                    @:Please select an account type...
                } else {
                    @:Confirm
                }
            </button>
        </div>
    </div>
</EditForm>